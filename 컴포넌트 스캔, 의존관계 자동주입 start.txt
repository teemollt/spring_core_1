# 4가지 의존관계 주입 방법
    1. 생성자 주입
    2. 수정자 주입(setter)
    3. 필드 주입
    4. 일반 메서드 주입

    1. 생성자 주입
    - 생성자를 통해 의존관계 주입
    - 특징
        a. 생성자 호출시점에 딱 1번만 호출되는 것 보장.
        b. 불변, 필수 의존관계에 사용
        c. 생성자가 딱 1개만 있으면 @Autowired 생략해도 자동 주입됨(스프링빈인 클래스에 한해..)

    2. 수정자 주입(setter)
    - setter 수정자 메서드로 필드의 값을 변경해 의존관계를 주입
    - 특징
        a. 선택, 변경 가능성이 있는 의존관계에서 사용
        b. 자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법임.(setter, getter)
        c. @Autowired의 기본동작은 주입할 대상이 없으면 오류 발생. 주입할 대상이 없어도 동작하게 하려면
            @Autowired(required = false)로 지정하면 됨.

    3. 필드 주입
    - 필드에 바로 주입하는 방식
    - 특징
        a. 코드가 간결해 많은 개발자들을 유혹ㅎㅎ.. but 외부에서 변경이 불가능해서 테스트 하기 힘들다는 치명적 단점 존재.
        b. DI프레임워크가 없으면 아무것도 할 수 없음.
        c. 사용하지말자 이거임!
        ( 애플리케이션의 실제코드와 관계없는 테스트코드나 설정 @Configuration 등에서만 특별한 용도로 사용)
        참고 : 순수한 자바 테스트 코드에는 당연히 @Autowired가 동작하지 않음.
            @SpringBootTest와 같이 스프링 컨테이너를 테스트에 통합한 경우에만 가능


    4. 일반 메서드 주입
    - 일반 메서드를 통해서 주입 받을 수 있다.
    - 특징
        a. 한번에 여러 필드를 주입 받을 수 있음.
        b. 일반적으로 잘 사용하지 않음

# 옵션 처리
    주입할 스프링 빈이 없어도 동작해야 할 때가 있음.
    but, @Autowired만 사용하면 옵션 기본값이 true이기 떼문에 주입 대상이 없으면 오류 발생

    다음과 같이 자동 주입 대상을 옵션으로 처리
    - @Autowired(required-false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨
    - org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력됨
    - Optional<> : 자동 주입할 대상이 없으면 Optional.empty가 입력됨.

# 생성자 주입을 선택하자!!
    과거에는 수정자 주입, 필드 주입 많이 사용했지만, 스프링을 포함한 DI프레임워크 대부분이 생성자 주입을 권장함!!
    아래는 그 이유
    1. 불변
        - 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다.
            오히려 대부분의 의존관계는 애플리케이션 종료 전까지 변하면 안된다!
        - 수정자 주입을 사용하면, setXxx메서드를 public으로 열어줘야함 -> 누군가 실수로 변경할 수 있음
        - 변경하면 안되는 메서드를 열어두는 것은 좋은 설계가 아님
        - 생성자 주입은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다. 따라서 불변!


    2. 누락
        - 프레임워크 없이 순수한 자바 코드를 단위 테스트 하는 경우에
            수정자 의존관계인 경우 Null Point Exception 발생, 의존관계 주입이 누락되었기때문.
        - 생성자 주입을 사용하면 주입 데이터를 누락했을때 "컴파일 오류"가 발생하여
        바로 어떤 값을 필수로 주입해야 하는지 알 수 있음.

    3. final 키워드
        - 생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다.
            (생성자 주입이 아니라면 객체가 생성된 이후에 값을 넣어줄 수 있으므로 애초에 final 키워드를 쓸수도 없음)
            생성자에서 값이 설정되지 않는 오류를 컴파일 시점에서 막아줌.
            OrderServiceImpl 의 필드들에 사용한 final 참고
                -> 생성자에서 해당 필드값 설정하는 코드를 잠시 주석 처리해보자. 필드에 바로 빨간줄 뜰거임.
                -> 또는 컴파일시 바로 컴파일 오류, : ~~ might not have been initialized
                 컴파일 오류는 가장 빠르고 좋은 오류다!

    #정리
    - 생성자 주입 방식을 선택하는 이유는 우선 프레임워크에 의존하지 않고, 순수 자바 언어의 특징을 잘 살리는 방법
    - 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에 수정자 주입 방식을 옵션으로 부여하면 됨.
     -> 생성자 주입과 수정자 주입을 동시에 사용할 수 있음.
    - 항상 생성자 주입을 선택해! 그리고 가끔 옵션이 필요하면 수정자 주입을 선택! 필드 주입은 쓰지말자...

# 롬복과 최신 트렌드
    - 개발을 해보면 대부분이 다 불변, 그래서 다음과 같이 새성자에 final 키워드를 사용하게 됨
      그런데 생성자 등등 코드가 많아짐, 편리하게 사용하는 법 없나??
      -> lombok 사용!!! (gradle에 추가, 플러그인 추가, annotationProcessor 사용 체크)
      -> OrderServiceImpl, HelloLombok 참고

      정리
        - 롬복 라이브러리가 제공하는 @RequiredArgsConstructor 기능 사용하면 final이 붙은 필드를 모아서
            생성자를 자동으로 만들어줌.(코드에는 보이지 않아도 호출가능)

        - 최근에는 생성자를 딱 1개 두고, @Autowired를 생략하는 방법을 주로 사용함(생성자 1개일 경우 생략가능)
            여기에 Lombok라이브러리의 @RequiredArgsConstructor 함께 사용하면
            필요한 기능들 모두 코드 깔끔하게 사용 가능


####조회 빈이 2개 이상 - 문제####
    - @Autowired는 타입으로 조회함
    @Autowired
    private DiscountPolicy discountPolicy
    위 코드는
     => ac.getBean(DiscountPolicy.class)와 유사하게 동작(실제론 더 많은 기능 제공)

    이경우 타입으로 조회하기 때문에 선택된 빈이 2개 이상일때 문제가 발생함

    하나의 인터페이스를 구현한 fixDiscountPolicy,rateDiscountPolicy 둘다 @Component로 스프링빈 등록을 하면
    해당 인터페이스의 객체를 자동주입해주는 곳에서 아래와 같은 에러가 뜬다.
    UnsatisfiedDependencyException
    No qualifying bean of type 'hello.core.discount.DiscountPolicy' available:
    expected single matching bean but found 2: fixDiscountPolicy,rateDiscountPolicy

    상위 타입이 아니라 하위 타입으로 지정하면 에러는 면할 수 있겠지만,
    DIP를 위배하고 유연성이 떨어진다.
    + 그리고 이름만 다르고 완전히 똑같은 타입의 스프링빈 2개가 있는 경우를 해결할 수 없다.
    -> 스프링빈 수동 등록으로 문제를 해결할 수도 있지만, 의존관계 자동 주입에서 해결하는 방법이 있음!!!

####조회 빈이 2개 이상 - 해결방법####
    1. @Autowired 필드명 매칭
    2. @Quilifier -> @Quilifier 끼리 매칭 -> 빈 이름 매칭
    3. @Primary 사용

    1. @Autowired 필드명 매칭
        - @Autowired는 타입 매칭을 시도하고, 이때 빈이 여러개면
            필드 이름, 파라미터 이름으로 빈 이름을 추가 매칭!
        - 타입 필드명이 DiscountPolicy discountPolicy일땐
            DiscountPolicy를 구현한 하위타입이 RateDiscount~, FixDiscount 2개이므로 에러가 났었지만
            DiscountPolicy rateDiscountPolicy와 같이 필드명을 하위타입과 똑같이 지어주면
            RateDiscountPolicy로 (필드명으로) 추가적으로 자동 매칭 해줌!!

    2. @Quilifier 사용
        - @Quilifier는 추가 구분자를 붙여주는 방법. 주입시 추가적인 방법을 제공하는것. 빈 이름 변경은 아님!
        - 빈 등록시 @Quilifier를 붙여주면됨
        @Component
        @Quilifier("mainDiscountPolicy")
        public class RateDiscountPoicy implements ~~~
        와 같이 빈등록 해주고
        - 주입시 아래와 같이 사용하면됨.
        파라미터에 @Quilifier("mainDiscountPolicy") DiscountPolicy discountPolicy
        - OrderServiceImpl, RateDiscountPolicy 참고
        - @Bean 을 사용하는 직접 빈 등록시에도 사용 가능

        - 순서대로 해당 방식으로 매칭이 안되면 다음 순서로 넘어감.
            a. @Quilifier끼리 매칭
            b. @Quilifier도 마찬가지로 @Quilifier로 설정된 이름에 일치 하는게 없으면 빈 이름으로..
            c. NoSuchBeanDefinitionException 예외 발생

    3. @Primary 사용
        - @Primary는 우선순위를 정하는 방법.
        - @Autowired 시에 여러 빈이 매칭되면 @Primary가 우선권을 가진다.


    ##우선순위###
    - @Primary는 기본값처럼 동작, @Quilifier는 매우 상세하게 동작함.
        => @Quilifier가 우선권이 높음.
        (스프링은 자동보다는 수동이, 넓은 범위 선택권 보단 좁은 범위 선택권이 우선순위가 높음)